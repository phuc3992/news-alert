import os
import time
import hashlib
import requests
import feedparser
import smtplib
from email.mime.text import MIMEText
from newspaper import Article

# ================== ENV CONFIG ==================
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
EMAIL_USER         = os.getenv("EMAIL_USER")            # v√≠ d·ª•: you@gmail.com
EMAIL_PASS         = os.getenv("EMAIL_PASS")            # Gmail App Password 16 k√Ω t·ª±
EMAIL_TO           = os.getenv("EMAIL_TO", EMAIL_USER)

# Gist ƒë·ªÉ l∆∞u hash b√†i ƒë√£ g·ª≠i (tr√°nh g·ª≠i l·∫∑p)
GIST_TOKEN = os.getenv("GIST_TOKEN")                    # GitHub PAT (scope: gist)
GIST_ID    = os.getenv("GIST_ID")                       # ID c·ªßa Gist
GIST_FILE  = "sent_hashes.txt"                          # t√™n file trong Gist

PER_FEED_DELAY_SEC = 0.5

# ================== RSS FEEDS ==================
rss_feeds = [
    # VnExpress
    "https://vnexpress.net/rss/tin-moi-nhat.rss",
    "https://vnexpress.net/rss/thoi-su.rss",
    "https://vnexpress.net/rss/kinh-doanh.rss",
    "https://vnexpress.net/rss/phap-luat.rss",
    "https://vnexpress.net/rss/the-gioi.rss",
    "https://vnexpress.net/rss/giai-tri.rss",
    "https://vnexpress.net/rss/suc-khoe.rss",
    "https://vnexpress.net/rss/giao-duc.rss",
    "https://vnexpress.net/rss/du-lich.rss",

    # D√¢n Tr√≠
    "https://dantri.com.vn/rss/tin-moi-nhat.rss",
    "https://dantri.com.vn/rss/xa-hoi.rss",
    "https://dantri.com.vn/rss/phap-luat.rss",
    "https://dantri.com.vn/rss/kinh-doanh.rss",

    # Vietnamnet
    "https://vietnamnet.vn/rss/tin-moi-nhat.rss",
    "https://vietnamnet.vn/rss/thoi-su.rss",
    "https://vietnamnet.vn/rss/phap-luat.rss",

    # Tu·ªïi Tr·∫ª
    "https://tuoitre.vn/rss/tin-moi-nhat.rss",
    "https://tuoitre.vn/rss/thoi-su.rss",
    "https://tuoitre.vn/rss/phap-luat.rss",

    # Lao ƒê·ªông
    "https://laodong.vn/rss/tin-moi-nhat.rss",
    "https://laodong.vn/rss/thoi-su.rss",
    "https://laodong.vn/rss/phap-luat.rss",

    # Thanh Ni√™n
    "https://thanhnien.vn/rss/thoi-su.rss",
    "https://thanhnien.vn/rss/thoi-su/phap-luat.rss",
    "https://thanhnien.vn/rss/kinh-te.rss",

    # VOV
    "https://vov.vn/rss/tin-moi-nhat.rss",
    "https://vov.vn/rss/thoi-su-1.rss",
    "https://vov.vn/rss/phap-luat-5.rss",

    # Nh√¢n D√¢n
    "https://nhandan.vn/rss/tin-moi-nhat.rss",
    "https://nhandan.vn/rss/thoi-su.rss",
    "https://nhandan.vn/rss/phap-luat.rss",

    # CafeF
    "https://cafef.vn/rss/tin-moi-nhat.rss",

    # B·ªï sung theo y√™u c·∫ßu
    # Ng∆∞·ªùi Lao ƒê·ªông
    "https://nld.com.vn/rss/home.rss",
    "https://nld.com.vn/rss/phap-luat.rss",
    # Ti·ªÅn Phong
    "https://tienphong.vn/rss/xa-hoi-2.rss",
    "https://tienphong.vn/rss/phap-luat-12.rss",
    # VnEconomy
    "https://vneconomy.vn/feed",
    # B√°o Ch√≠nh Ph·ªß
    "https://baochinhphu.vn/rss/home.rss",
    "https://baochinhphu.vn/xa-hoi/phap-luat.rss"
    ,
]

# ================== KEYWORD GROUPS ==================
group1 = ["c√¥ng ty", "doanh nghi·ªáp", "vietinbank"]
group2 = [
    "truy t·ªë", "kh·ªüi t·ªë", "t·∫°m giam", "ph√° s·∫£n", "b·ªã b·∫Øt", "qua ƒë·ªùi", "b·ªè tr·ªën", "l·ª´a ƒë·∫£o",
    "kh√°m x√©t", "ƒë√°nh b·∫°c", "ma t√∫y"
]
# Y√™u c·∫ßu m·ªõi: b·ªè nh√≥m 3 (kh√¥ng l·ªçc theo ƒë·ªãa ph∆∞∆°ng)
# => ch·ªâ l·ªçc theo group1 & group2

# ================== HEADERS ==================
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0 Safari/537.36",
    "Accept": "application/rss+xml, application/xml;q=0.9, */*;q=0.8",
}

# ============= Persist hashes qua GitHub Gist =============
def _gist_headers():
    if not GIST_TOKEN:
        raise RuntimeError("Thi·∫øu GIST_TOKEN (ENV).")
    return {
        "Authorization": f"token {GIST_TOKEN}",
        "Accept": "application/vnd.github+json",
        "X-GitHub-Api-Version": "2022-11-28",
    }

def load_sent_hashes():
    if not GIST_ID or not GIST_TOKEN:
        print("C·∫£nh b√°o: kh√¥ng c√≥ GIST_ID/GIST_TOKEN -> ch·ªâ nh·ªõ local (n·∫øu c√≥).")
        if os.path.exists("sent_hashes.txt"):
            with open("sent_hashes.txt", "r", encoding="utf-8") as f:
                return set(line.strip() for line in f if line.strip())
        return set()
    try:
        url = f"https://api.github.com/gists/{GIST_ID}"
        r = requests.get(url, headers=_gist_headers(), timeout=30)
        r.raise_for_status()
        data = r.json()
        files = data.get("files", {})
        content = files.get(GIST_FILE, {}).get("content", "")
        hashes = set(line.strip() for line in content.splitlines() if line.strip())
        print(f"N·∫°p {len(hashes)} hash t·ª´ Gist.")
        return hashes
    except Exception as e:
        print(f"C·∫£nh b√°o: kh√¥ng t·∫£i ƒë∆∞·ª£c Gist: {e}. S·∫Ω d√πng file local t·∫°m.")
        if os.path.exists("sent_hashes.txt"):
            with open("sent_hashes.txt", "r", encoding="utf-8") as f:
                return set(line.strip() for line in f if line.strip())
        return set()

def save_sent_hash(hash_str: str, current_hashes: set):
    current_hashes.add(hash_str)
    try:
        with open("sent_hashes.txt", "w", encoding="utf-8") as f:
            f.write("\n".join(sorted(current_hashes)))
    except Exception:
        pass
    if not GIST_ID or not GIST_TOKEN:
        return
    try:
        url = f"https://api.github.com/gists/{GIST_ID}"
        new_content = "\n".join(sorted(current_hashes))
        payload = {"files": {GIST_FILE: {"content": new_content}}}
        r = requests.patch(url, headers=_gist_headers(), json=payload, timeout=30)
        r.raise_for_status()
        print("ƒê√£ c·∫≠p nh·∫≠t Gist v·ªõi hash m·ªõi.")
    except Exception as e:
        print(f"C·∫£nh b√°o: kh√¥ng ghi ƒë∆∞·ª£c Gist: {e}")

# ------------------ L·ªçc ƒëi·ªÅu ki·ªán ------------------
def match_groups(title: str, summary: str, g1, g2) -> bool:
    text = (title + " " + summary).lower()
    return (
        any(kw.lower() in text for kw in g1) and
        any(kw.lower() in text for kw in g2)
    )

# ------------------ T√≥m t·∫Øt AI ------------------
def ai_summarize(text: str, max_sentences: int = 10) -> str:
    if not OPENROUTER_API_KEY:
        return "Kh√¥ng c√≥ OPENROUTER_API_KEY (ENV). B·ªè qua t√≥m t·∫Øt AI."

    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}", "Content-Type": "application/json"}
    prompt = (
        f"B·∫°n l√† bi√™n t·∫≠p vi√™n b√°o Vi·ªát. T√≥m t·∫Øt n·ªôi dung d∆∞·ªõi ƒë√¢y b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn kho·∫£ng {max_sentences} c√¢u, "
        f"gi·ªØ s·ªë li·ªáu v√† t√™n ri√™ng:\n\n{text}\n\nT√≥m t·∫Øt:"
    )
    data = {
        "model": "mistralai/mistral-7b-instruct",
        "messages": [{"role": "user", "content": prompt}],
        "max_tokens": 800,
        "temperature": 0.2,
    }
    try:
        r = requests.post(url, headers=headers, json=data, timeout=45)
        if r.status_code == 200:
            js = r.json()
            return js["choices"][0]["message"]["content"].strip()
        else:
            return f"Kh√¥ng t√≥m t·∫Øt ƒë∆∞·ª£c b·∫±ng AI (HTTP {r.status_code})."
    except Exception as e:
        return f"Kh√¥ng t√≥m t·∫Øt ƒë∆∞·ª£c b·∫±ng AI ({e})."

def summarize_article_ai(url: str, max_sentences: int = 10) -> str:
    try:
        article = Article(url)
        article.download()
        article.parse()
        text = (article.text or "").strip()
        if not text:
            return "Kh√¥ng l·∫•y ƒë∆∞·ª£c n·ªôi dung chi ti·∫øt."
        return ai_summarize(text, max_sentences=max_sentences)
    except Exception:
        return "Kh√¥ng l·∫•y ƒë∆∞·ª£c n·ªôi dung chi ti·∫øt."

# ------------------ RSS ------------------
def parse_rss_with_headers(feed_url: str):
    try:
        r = requests.get(feed_url, headers=HEADERS, timeout=20)
        r.raise_for_status()
        return feedparser.parse(r.content)
    except Exception as e:
        print(f"  L·ªói t·∫£i RSS {feed_url}: {e}")
        return None

# ------------------ Email (template + g·ª≠i) ------------------
def template_subject(title: str) -> str:
    # B·∫°n c√≥ th·ªÉ ƒë·ªïi ti√™u ƒë·ªÅ t·∫°i ƒë√¢y
    return f'TH·ªúI B√ÅO KTKSNB - "{title}"'

def template_body(title: str, link: str, article_summary: str) -> str:
    # ƒê·ªïi format email body theo √Ω b·∫°n t·∫°i ƒë√¢y (HTML)
    safe_summary = (article_summary or "").replace("\n", "<br/>")
    return f"""
<div style="font-family: Arial, Helvetica, sans-serif; font-size: 15px; line-height: 1.6; color: #111;">
  <p><em><strong>K√≠nh g·ª≠i:</strong> Anh/Ch·ªã,</em></p>

  <p>T·ªï hi·ªán ƒë·∫°i h√≥a ph√≤ng KTKSNB k√≠nh g·ª≠i anh/ch·ªã th√¥ng tin b√†i b√°o:
     <strong>"{title}"</strong>
  </p>

  <p><em><strong>Link b√†i b√°o:</strong></em><br/>
     <a href="{link}" target="_blank" rel="noopener noreferrer">{link}</a>
  </p>

  <p><em><strong>T√≥m t·∫Øt:</strong></em><br/>
     {safe_summary}
  </p>

  <p>Ch√∫c Anh/Ch·ªã ng√†y l√†m vi·ªác hi·ªáu qu·∫£ üòä</p>
</div>
"""

def send_email_smtp_html(subject: str, html_body: str, to_addr: str):
    if not EMAIL_USER or not EMAIL_PASS:
        raise RuntimeError("Thi·∫øu EMAIL_USER/EMAIL_PASS trong ENV.")
    msg = MIMEText(html_body, "html", _charset="utf-8")
    msg["Subject"] = subject
    msg["From"] = EMAIL_USER
    msg["To"] = to_addr
    with smtplib.SMTP("smtp.gmail.com", 587, timeout=60) as server:
        server.starttls()
        server.login(EMAIL_USER, EMAIL_PASS)
        server.send_message(msg)

# ------------------ Main ------------------
def main():
    print("B·∫Øt ƒë·∫ßu qu√©t tin t·ª©c...")
    if not EMAIL_USER or not EMAIL_PASS:
        print("Thi·∫øu EMAIL_USER/EMAIL_PASS trong ENV. D·ª´ng.")
        return

    sent_hashes = load_sent_hashes()
    print(f"ƒê√£ t·∫£i {len(sent_hashes)} hash b√†i ƒë√£ g·ª≠i tr∆∞·ªõc ƒë√≥.")

    for i, feed_url in enumerate(rss_feeds, 1):
        print(f"ƒêang qu√©t RSS {i}/{len(rss_feeds)}: {feed_url}")
        feed = parse_rss_with_headers(feed_url)
        if not feed or not getattr(feed, "entries", None):
            print("  Kh√¥ng c√≥ b√†i vi·∫øt n√†o t·ª´ RSS n√†y.")
            continue

        for entry in feed.entries:
            title = getattr(entry, "title", "")
            summary = getattr(entry, "summary", "")
            link = getattr(entry, "link", "")

            if not title or not link:
                continue

            # D√πng link l√†m kh√≥a duy nh·∫•t
            hash_str = hashlib.md5(link.encode("utf-8")).hexdigest()
            if hash_str in sent_hashes:
                continue

            if match_groups(title, summary, group1, group2):
                print(f"  T√¨m th·∫•y b√†i ph√π h·ª£p: {title}")
                print("  ƒêang t√≥m t·∫Øt n·ªôi dung b·∫±ng AI...")
                article_summary = summarize_article_ai(link, max_sentences=10)

                subject = template_subject(title)
                html_body = template_body(title, link, article_summary)

                try:
                    send_email_smtp_html(subject, html_body, EMAIL_TO)
                    print("  ‚úì ƒê√£ g·ª≠i c·∫£nh b√°o th√†nh c√¥ng!")
                    save_sent_hash(hash_str, sent_hashes)
                except Exception as e:
                    print(f"  ‚úó L·ªói g·ª≠i email: {e}")

        time.sleep(PER_FEED_DELAY_SEC)

    print("Ho√†n th√†nh qu√©t tin t·ª©c!")

if __name__ == "__main__":
    main()
